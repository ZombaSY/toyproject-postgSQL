CREATE OR REPLACE FUNCTION createexperiment(
    arg_api_key CHARACTER,
    arg_account_id CHARACTER,
    arg_workspace_name CHARACTER,
    arg_project_name CHARACTER,
    arg_experiment_name CHARACTER)
    RETURNS TABLE(
        experiment_id_key CHARACTER,
        project_id INTEGER)
    LANGUAGE plpgsql
as
$$
DECLARE
	select_query INTEGER;
	temp_experiment_id INTEGER;
	var_account_index INTEGER;
    v_random_string TEXT;
    is_available_access_key BOOL := FALSE;
BEGIN
	SELECT DISTINCT public.project.id, public.account.id FROM public.account
		LEFT JOIN public.api_key ON public.api_key.account_id = arg_account_id
		LEFT JOIN public.workspace ON public.workspace.name = arg_workspace_name
		LEFT JOIN public.project ON public.project.belonged_workspace_id = public.workspace.id
		WHERE public.api_key.api_key = arg_api_key AND
		      public.project.name = arg_project_name AND
		      public.account.account_id = arg_account_id
	    INTO select_query, var_account_index;


	IF select_query IS NULL THEN
		RAISE WARNING 'Project does not found!!!';
	ELSE

	    -- Generate unique access key --
	    WHILE is_available_access_key IS NOT TRUE
        LOOP
	        v_random_string := (SELECT * FROM public.generate_random_string(16));
            IF v_random_string IN
                (SELECT access_key FROM public.experiment) THEN
                RAISE NOTICE 'access key is already in DB. Generate again.';
            ELSE
                is_available_access_key := TRUE;
            END IF;
        END LOOP;

		INSERT INTO public.experiment (name, belonged_project_id, creator, access_key)
		VALUES (
		        arg_experiment_name,
		        select_query,
		        var_account_index,
		        v_random_string)
		RETURNING experiment.id INTO temp_experiment_id;

		project_id := select_query;
		experiment_id_key := v_random_string;

		RETURN NEXT;
	END IF;
END;
$$;


SELECT * FROM public.project