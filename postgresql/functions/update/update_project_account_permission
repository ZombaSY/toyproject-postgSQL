CREATE OR REPLACE FUNCTION public.update_project_account_permission(
	arg_account_index integer,
	arg_project_index_key TEXT,
	arg_alter_account_email text,
	arg_alter_account_permission integer)
    RETURNS TABLE(
        tb_code INTEGER,
        tb_project_id INTEGER)
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE

AS $BODY$
DECLARE
    v_project_index INTEGER;
	v_user_permission INTEGER;
	v_alter_account_index INTEGER;
    v_administrator_id INTEGER;
BEGIN
    v_project_index :=
        (SELECT id FROM public.project WHERE public.project.access_key = arg_project_index_key);

	-- Check account's permission --
	v_user_permission := (SELECT user_permission FROM public.ref_account_project
						  	WHERE id_account = arg_account_index AND id_project = v_project_index);

	-- Get account index by email --
	BEGIN
		v_alter_account_index := (SELECT * FROM public.get_account_index(arg_alter_account_email));
		EXCEPTION
			WHEN SQLSTATE 'P0001' THEN
				tb_code := -102;
				RETURN NEXT;
	END;

	IF v_user_permission = 1 THEN	-- Is Maintainer --

		v_administrator_id :=
			(SELECT administrator_id FROM public.project
				INNER JOIN public.ref_account_project ON public.ref_account_project.id_project = public.project.id
				WHERE public.ref_account_project.id_account = arg_account_index AND public.ref_account_project.id_project = v_project_index);

		IF v_alter_account_index = v_administrator_id THEN
			tb_code := -101;    -- Cannot change admin's permission --
			RETURN NEXT;

		ELSE
            UPDATE public.ref_account_project
                SET user_permission = arg_alter_account_permission
                WHERE id_account = v_alter_account_index AND id_project = v_project_index;

            tb_code := 0;
            tb_project_id := v_project_index;
            RETURN NEXT;
        END IF;

	ELSE
		tb_code := -100;	-- Permission Denied --
		RETURN NEXT;
	END IF;
END;
$BODY$;
