CREATE OR REPLACE FUNCTION public.update_experiment_finished_date(
	arg_api_key CHARACTER,
	arg_account_id CHARACTER,
	arg_experiment_id CHARACTER,
	arg_experiment_state INTEGER)

    RETURNS TABLE(
        tb_code INTEGER,
        tb_project_name TEXT,
        tb_project_id INTEGER,
        tb_experiment_name TEXT,
        tb_experiment_creator_id BIGINT,
        tb_workspace_id INTEGER)

    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE

AS $BODY$
DECLARE
	is_available boolean;
    v_project_name TEXT;
    v_project_id INTEGER;
    v_workspace_id INTEGER;
    v_experiment_name TEXT;
    v_experiment_creator_id BIGINT;
BEGIN
	is_available :=(SELECT * FROM public.is_available_apikey(arg_api_key,arg_account_id));

	IF is_available IS TRUE THEN

        UPDATE public.experiment
            SET experiment_state = arg_experiment_state
            FROM experiment as ex
            INNER JOIN public.account ON public.account.id = ex.creator
            INNER JOIN public.project ON public.project.id = ex.belonged_project_id
            WHERE experiment.access_key = arg_experiment_id
            RETURNING project.name, experiment.belonged_project_id, experiment.name, account.id, project.belonged_workspace_id;

		tb_code := 0;
            IF v_project_name IS NOT NULL THEN
                tb_project_name := v_project_name;
                tb_project_id := v_project_id;
                tb_experiment_name := v_experiment_name;
                tb_experiment_creator_id := v_experiment_creator_id;
                tb_workspace_id := v_workspace_id;

            ELSE
                tb_code := -201;
            END IF;

        RETURN NEXT;
	ELSE
	    tb_code := 125;
		RETURN NEXT;
	END IF;
END;$BODY$;
